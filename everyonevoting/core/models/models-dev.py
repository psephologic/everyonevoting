__author__ = 'eronlloyd'

from . import BaseEMSModel


import datetime
#import pytz

from django.db import models
from django.utils import timezone
from django.contrib.auth.models import User

#from methods import *


class AuditLogEntry(models.Model):
    pass


# Management Support Models
# ----------------------------------------------------------------------------

class CalendarEvent(models.Model):
    """
    All election events, from the poll opening/closing to final reporting.
    """
    name = models.CharField(max_length=100)
    datetime_begin = models.DateTimeField()
    datetime_end = models.DateTimeField()
    election = models.ForeignKey('Election')
    is_required = models.BooleanField(default=False)
    trigger_notification = models.BooleanField(default=False)


class Task(models.Model):
    # public/private
    pass


class Contact(models.Model):
    # public/private
    pass


class Location(models.Model):
    pass


class Message(models.Model):
    pass


class StatusUpdate(models.Model):
    pass


class Tag(BaseEMSModel):
    # public/private
    pass


class Activity(models.Model):
    date = models.DateTimeField()
    #user = models.ForeignKey('user_id') # User ID
    message = models.CharField(max_length=500) # Generated by the originating
    # object
    #item = models.ForeignKey('item_id')

# EML Core Classes
# ----------------------------------------------------------------------------





# Other

class Poll(models.Model):
    question = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')

    def __unicode__(self):
        return self.question

    def was_published_recently(self):
        return self.pub_date >= timezone.now() - datetime.timedelta(days=1)
    was_published_recently.admin_order_field = 'pub_date'
    was_published_recently.boolean = True
    was_published_recently.short_description = 'Published recently?'


class Choice(models.Model):
    poll = models.ForeignKey(Poll)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)

    def __unicode__(self):
        return self.choice_text


# Data Import
# ----------------------------------------------------------------------------

class FileImport(BaseEMSModel):
    """Core file import object to track imports and possibly roll them back or
    redo them."""
    # TODO: set a file limit and security check?
    # TODO: rename file to org. name-record type-date-file type
    import_file = models.FileField(upload_to='uploads/imports/')
    import_datetime = models.DateTimeField()
    FILE_TYPE = (
        (u'CSV', u'CSV'),
        #(u'EML', u'EML'),
    )
    file_type = models.CharField(max_length=4, choices=FILE_TYPE,
        default='CSV')
    # We need to indicate the type of record to correctly map available fields!
    RECORD_TYPE = (
        (u'voters', u'Voters'),
    )
    record_type = models.CharField(max_length=30, choices=RECORD_TYPE,
        default="voters")
    total_records = models.IntegerField()
    skipped_records = models.IntegerField()
    imported_records = models.IntegerField()
    # TODO: serialize the mappings from a dictionary object
    field_mappings = models.TextField()
    uploaded_by = models.ForeignKey(User, unique=True, blank=False, null=False)
    organization = models.ForeignKey(Organization, unique=True,
        blank=False, null=False)